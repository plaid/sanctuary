
import { a, b, def } from '../_internal'
import $ from 'sanctuary-def'

//# unfoldr :: (b -> Maybe (Pair a b)) -> b -> Array a
//.
//. Takes a function and a seed value, and returns an array generated by
//. applying the function repeatedly. The array is initially empty. The
//. function is initially applied to the seed value. Each application
//. of the function should result in either:
//.
//.   - Nothing, in which case the array is returned; or
//.
//.   - Just a pair, in which case the first element is appended to
//.     the array and the function is applied to the second element.
//.
//. ```javascript
//. > S.unfoldr(n => n < 5 ? S.Just([n, n + 1]) : S.Nothing, 1)
//. [1, 2, 3, 4]
//. ```
export const unfoldr =
def('unfoldr',
    {},
    [$.Function, b, $.Array(a)],
    function(f, x) {
      var result = [];
      var m = f(x);
      while (m.isJust) {
        result.push(m.value[0]);
        m = f(m.value[1]);
      }
      return result;
    });
